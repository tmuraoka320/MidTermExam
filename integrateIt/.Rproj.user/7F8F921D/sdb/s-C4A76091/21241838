{
    "contents" : "#' Create an Object with class \"Trap\" or \"Simpson\"\n#'\n#' Create an instance with S4 class \"Trap\" or \"Simpson\"\n#'\n#'\n#' @param x A numeric vector x\n#' @param y A numeric vector y (= f(x))\n#' @param a A starting value\n#' @param b An ending value\n#' @param Trap A rule argument. If TRUE, the Trapezoidal rule is applied. If FALSE, the Simpson rule is applied. Defalt is TRUE.\n#'\n#'\n#' @return An object of class \"Trap\" or \"Simpson\" containing\n#'  \\item{x}{A vector of x}\n#'  \\item{y}{A vector of y}\n#'  \\item{result}{The result calculated by the Trapezoidal or Simpson rule}\n#'\n#' @author Taishi Muraoka \\email{tmuraoka@@wustl.edu}\n#'\n#' @examples\n#' myx <- 0:10\n#' myy <- cos(3*myx) + sin(2*sin(myx))\n#' mya <- 0\n#' myb <- 10\n#' integrateIt(myx, myy, mya, myb, Trap=TRUE)\n#' integrateIt(myx, myy, mya, myb, Trap=FALSE)\n#'\n#' @aliases integrateIt,ANY-method\n#'\n#' @rdname integrateIt\n#'\n#' @export\nsetGeneric(name=\"integrateIt\",\n           def=function(x, y, a, b, Trap=TRUE, ...){\n             standardGeneric(\"integrateIt\")\n           })\n\n#' @export\nsetValidity(\"Trap\", function(object){\n  if(is.numeric(object@x)==FALSE){\n    print(\"x should be a numeric vector!\")\n  }\n  if(is.numeric(object@y)==FALSE){\n    print(\"y should be a numeric vector!\")\n  }\n  if(length(object@x) != length(object@y)){\n    print(\"the length of x and y should be same!\")\n  }\n})\n\n#' @export\nsetMethod(\"integrateIt\",\n          definition=function(x, y, a, b, Trap=TRUE, ...){\n            if(is.vector(x)==FALSE | is.vector(y)==FALSE){\n              stop(\"x and y should be a vector!\")\n            }\n            if(is.numeric(x)==FALSE | is.numeric(b)==FALSE |\n               is.numeric(a)==FALSE | is.numeric(b)==FALSE){\n              stop(\"x, y, a, and b should be numeric!\")\n            }\n            if(length(x) != length(y)){\n              stop(\"the length of x and y vectors should be same!\")\n            }\n            if(length(a) != 1 | length(b) != 1){\n              stop(\"a and b should be length 1\")\n            }\n            subx <- x[which(x >= a & x <= b)]\n            suby <- y[which(x >= a & x <= b)]\n            if(Trap==TRUE){\n              h2_part <- ((b-a)/(length(subx)-1))/2\n              sum_part <- sum(mapply(function(p,q){p*q},\n                                     p=suby, q=c(1, rep(2, length(suby)-2), 1)))\n              object <- new(\"Trap\",\n                            x=subx,\n                            y=suby,\n                            result=h2_part*sum_part)\n            }\n            else{\n              if(length(subx)%%2 != 1){\n                stop(\"the length of x and y should be odd if you are to use the Simpson rule!\")\n              }\n              h3_part <- ((b-a)/(length(subx)-1))/3\n              sum_part <- sum(mapply(function(p,q){p*q},\n                                     p=suby, q=c(1, rep(c(4,2), (length(suby)-3)/2),\n                                                 4, 1)))\n              object <- new(\"Simpson\",\n                            x=subx,\n                            y=suby,\n                            result=h3_part*sum_part)\n            }\n            return(object)\n          })\n",
    "created" : 1458778276559.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "643272363",
    "id" : "21241838",
    "lastKnownWriteTime" : 1458778418,
    "path" : "~/MidTermExam/integrateIt/R/integrateIt.R",
    "project_path" : "R/integrateIt.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}